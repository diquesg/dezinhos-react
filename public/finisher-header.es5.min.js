class EmojiDie {
    constructor(emoji, options) {
        this.emoji = emoji;
        this.size = options.minSize + Math.random() * (options.maxSize - options.minSize);
        this.x = Math.random() * options.canvas.width;
        this.y = Math.random() * options.canvas.height;
        this.speedX = (Math.random() - 0.5) * options.speed;
        this.speedY = (Math.random() - 0.5) * options.speed;
        this.rotation = Math.random() * Math.PI * 2;
        this.rotationSpeed = (Math.random() - 0.5) * 0.05;
        this.opacity = options.baseOpacity * (0.7 + Math.random() * 0.3);
        this.darken = options.darken;
        this.canvas = options.canvas;
    }

    update() {
        this.x += this.speedX;
        this.y += this.speedY;
        this.rotation += this.rotationSpeed;
        if (this.x < 0 || this.x > this.canvas.width) this.speedX *= -1;
        if (this.y < 0 || this.y > this.canvas.height) this.speedY *= -1;
        this.x = Math.max(0, Math.min(this.canvas.width, this.x));
        this.y = Math.max(0, Math.min(this.canvas.height, this.y));
    }

    draw(ctx) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rotation);
        ctx.globalAlpha = this.opacity;
        ctx.font = `${this.size}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        if (this.darken > 0) {
            ctx.fillStyle = `rgba(0, 0, 0, ${this.darken})`;
            ctx.fillText(this.emoji, 1, 1);
        }
        ctx.fillStyle = `rgba(255, 255, 255, ${1 - this.darken})`;
        ctx.fillText(this.emoji, 0, 0);
        ctx.restore();
    }
}

class DiceBackground {
    constructor(options) {
        this.options = {
            emojis: ['ðŸŽ²'],
            count: window.innerWidth < 768 ? 20 : 50,
            speed: 1.5,
            minSize: 15,
            maxSize: 45,
            baseOpacity: 0.6,
            darken: 0.3,
            ...options
        };

        if (typeof this.options.emojis === 'string') {
            this.options.emojis = [this.options.emojis];
        }

        this.canvas = document.createElement('canvas');
        this.canvas.className = 'dice-background';
        this.ctx = this.canvas.getContext('2d');
        this.dice = [];
        this.init();
    }

    init() {
        document.body.appendChild(this.canvas);
        this.resize();
        window.addEventListener('resize', () => this.resize());
        this.createDice();
        this.animate();
    }

    resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }

    createDice() {
        this.dice = [];
        for (let i = 0; i < this.options.count; i++) {
            const randomEmoji = this.options.emojis[Math.floor(Math.random() * this.options.emojis.length)];
            this.dice.push(new EmojiDie(randomEmoji, {
                canvas: this.canvas,
                speed: this.options.speed,
                minSize: this.options.minSize,
                maxSize: this.options.maxSize,
                baseOpacity: this.options.baseOpacity,
                darken: this.options.darken
            }));
        }
    }

    animate() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        for (const die of this.dice) {
            die.update();
            die.draw(this.ctx);
        }
        requestAnimationFrame(() => this.animate());
    }
}
