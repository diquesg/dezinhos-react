class DiceBackground {
    constructor(options) {
        this.options = {
            emoji: 'ðŸŽ²',
            count: 30,
            speed: 1.5,
            minSize: 20,
            maxSize: 50,
            opacity: 0.3,
            darken: 0.5,
            ...options
        };

        this.canvas = document.createElement('canvas');
        this.canvas.className = 'dice-background';
        this.ctx = this.canvas.getContext('2d');
        this.dice = [];

        this.init();
        this.animate();
    }

    init() {
        document.body.appendChild(this.canvas);
        this.resize();
        window.addEventListener('resize', () => this.resize());

        for (let i = 0; i < this.options.count; i++) {
            this.dice.push(new EmojiDie(this.options.emoji, {
                canvas: this.canvas,
                speed: this.options.speed,
                minSize: this.options.minSize,
                maxSize: this.options.maxSize,
                opacity: this.options.opacity,
                darken: this.options.darken
            }));
        }
    }

    resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }

    animate() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        for (const die of this.dice) {
            die.update(this.canvas);
            die.draw(this.ctx);
        }

        requestAnimationFrame(() => this.animate());
    }
}

class EmojiDie {
    constructor(emoji, options) {
        this.emoji = emoji;
        this.options = options;
        this.size = this.getRandomSize();
        this.x = Math.random() * options.canvas.width;
        this.y = Math.random() * options.canvas.height;
        this.speedX = (Math.random() - 0.5) * options.speed;
        this.speedY = (Math.random() - 0.5) * options.speed;
        this.rotation = Math.random() * Math.PI * 2;
        this.rotationSpeed = (Math.random() - 0.5) * 0.05;
        this.opacity = 0.7 + Math.random() * 0.3;
    }

    getRandomSize() {
        return this.options.minSize + Math.random() * (this.options.maxSize - this.options.minSize);
    }

    update(canvas) {
        this.x += this.speedX;
        this.y += this.speedY;
        this.rotation += this.rotationSpeed;

        if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
        if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
    }

    draw(ctx) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rotation);

        const darken = this.options.darken || 0;
        const opacity = (this.options.opacity || 0.3) * this.opacity;

        ctx.globalAlpha = opacity;
        ctx.font = `${this.size}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        ctx.fillStyle = `rgba(0, 0, 0, ${darken})`;
        ctx.fillText(this.emoji, 1, 1);

        ctx.fillStyle = `rgba(255, 255, 255, ${1 - darken})`;
        ctx.fillText(this.emoji, 0, 0);

        ctx.restore();
    }
}
